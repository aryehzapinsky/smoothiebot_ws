#!/usr/bin/env python

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
import gazebo_msgs.msg
import gazebo_msgs.srv

import world_transform
import add_random_fruits as arf
import gripper

def show_trajectory(plan):
    display_trajectory_publisher = rospy.Publisher(
        '/move_group/display_planned_path',
        moveit_msgs.msg.DisplayTrajectory,
        queue_size=20)

    display_trajectory = moveit_msgs.msg.DisplayTrajectory()
    display_trajectory.trajectory_start = robot.get_current_state()
    display_trajectory.trajectory.append(plan)
    display_trajectory_publisher.publish(display_trajectory)

class ArmMover(object):

    def __init__(self):
        moveit_commander.roscpp_initialize(sys.argv)
        rospy.init_node("move_group_python_interface",
                        anonymous=True)


        self.robot = moveit_commander.RobotCommander()
        self.scene = moveit_commander.PlanningSceneInterface()
        self.group = moveit_commander.MoveGroupCommander("arm")
        self.grip  = gripper.Gripper()

        self.apple_waypoints = [[0.5451367000274355,  -0.32821038441372863,  1.0488899044786597,  0.10350893462440268,  0.508320223335784,  -0.4935066927564904,  0.6981028543168485], [0.5451657086099234,  -0.3282929399965255,  1.0487723503326665,  -0.3278006345616776,  0.5943178428525429,  0.4399232595898125,  0.588048102896299], [0.5452244320737287,  -0.3281540033308168,  1.0488378293283063,  -0.15065049751417578,  0.7083013461479153,  0.07693755433273919,  0.6853424278250101], [0.573221221500238,  -0.2763317234110172,  1.0055928678962514,  -0.1429475505143203,  0.6214671177525085,  0.09204004472284064,  0.764770063170469], [0.666686069471845,  -0.2510994994329945,  0.9464406390562232,  -0.15413001688860256,  0.7183905128940186,  0.07212293141185468,  0.6745052198777627], [0.7050196390663038,  -0.23763321212800737,  0.9433473170064602,  -0.15388370528942827,  0.7178481509430941,  0.07380329909920871,  0.6749569693514171], [0.7046144274633646,  -0.23866339097610856,  0.9400137356466315,  -0.12870444426853989,  0.7234191911280399,  0.09599582145890147,  0.6714794428689606], [0.09442401119644636,  -0.39920937033740733,  1.0998431184026416,  0.4708824426631291,  0.49292906441861584,  -0.5577945391318891,  0.473451069021537]]



    def arm_back(self):
        self.group.clear_pose_targets()
        pose_list = [[0.03894274321119722,  -0.43182277800870084,  0.5919905999483334,  0.4598194512175424,  -0.5032399757660837,  0.5115812798274018,  0.5230680579074843], [0.03889640782792717,  -0.4319024159265913,  0.5920886249559855,  0.47076480116359753,  0.4925556551110845,  -0.5579221585794067,  0.4738061772176298], [0.0673189081577579,  -0.4153377824667985,  0.8476800531228419,  0.4701971107782498,  0.49393513266812145,  -0.5564135776277854,  0.47470695419738684], [0.44666601065248257,  -0.42140665071362815,  1.0607423847434563,  0.4702744781086772,  0.4936031636406656,  -0.5569714214040165,  0.47432127068341273], [0.5874883177866049,  -0.18552062594700677,  1.02745730430895,  -0.010752527922021873,  0.7433984803537391,  -0.03618989040653631,  0.6677824304243114], [0.09442401119644636,  -0.39920937033740733,  1.0998431184026416,  0.4708824426631291,  0.49292906441861584,  -0.5577945391318891,  0.473451069021537]]
        self.group.set_pose_targets(pose_list)
        plan_a = self.group.plan()
        self.group.execute(plan_a)

    def move_to_apple(self):
        self.group.clear_pose_targets()
        pose_list = [[0.5451367000274355,  -0.32821038441372863,  1.0488899044786597,  0.10350893462440268,  0.508320223335784,  -0.4935066927564904,  0.6981028543168485], [0.5451657086099234,  -0.3282929399965255,  1.0487723503326665,  -0.3278006345616776,  0.5943178428525429,  0.4399232595898125,  0.588048102896299], [0.5452244320737287,  -0.3281540033308168,  1.0488378293283063,  -0.15065049751417578,  0.7083013461479153,  0.07693755433273919,  0.6853424278250101], [0.573221221500238,  -0.2763317234110172,  1.0055928678962514,  -0.1429475505143203,  0.6214671177525085,  0.09204004472284064,  0.764770063170469], [0.666686069471845,  -0.2510994994329945,  0.9464406390562232,  -0.15413001688860256,  0.7183905128940186,  0.07212293141185468,  0.6745052198777627], [0.7050196390663038,  -0.23763321212800737,  0.9433473170064602,  -0.15388370528942827,  0.7178481509430941,  0.07380329909920871,  0.6749569693514171], [0.7046144274633646,  -0.23866339097610856,  0.9400137356466315,  -0.12870444426853989,  0.7234191911280399,  0.09599582145890147,  0.6714794428689606], [0.09442401119644636,  -0.39920937033740733,  1.0998431184026416,  0.4708824426631291,  0.49292906441861584,  -0.5577945391318891,  0.473451069021537]]
        self.group.set_pose_targets(pose_list)
        plan_a = self.group.plan()
        self.group.execute(plan_a)

    def move_from_apple_to_box(self):
        self.group.clear_pose_targets()
        pose_list = [[0.5700536686139439,  -0.28016175171005053,  1.032494304427467,  -0.12860083766374386,  0.7234887293011842,  0.09580302818812855,  0.6714519066294516], [0.40326895837257565,  0.2338255542428106,  1.0547202099142354,  -0.1291260494571468,  0.7238789561460185,  0.09694404959555838,  0.670766406022659], [0.40326895837257565,  0.2338255542428106,  1.0547202099142354,  -0.1291260494571468,  0.7238789561460185,  0.09694404959555838,  0.670766406022659], [0.40318102647165166,  0.23533941632813835,  1.0541655811148718,  -0.6752893138979646,  0.1477083399706833,  0.7157092261914562,  0.09963379136993694], [0.4158472576492898,  0.3723181116052796,  1.0462588209981902,  -0.6834478314208488,  0.05448211410836133,  0.7278699991248735,  0.01166299028463134], [0.5129356972261717,  0.38180884805631177,  1.0393951412830718,  -0.6834662541993389,  0.05436903925363308,  0.727861326274626,  0.01165232402158084], [0.5875506246336094,  0.3763041795207202,  1.063396981981316,  -0.8057623576497088,  0.05605145592580426,  0.5895788052781288,  0.001445562241683962], [0.6137616233740558,  0.36922858927688135,  0.9842034415986988,  -0.6994332240845458,  0.053496952938704365,  0.712619080693081,  0.010260940752175795], [0.6575073028051109,  0.36431261430672174,  0.9748731371582009,  0.8277744821612689,  -0.05577557576199268,  -0.5582806319201085,  0.0011080857121941736], [0.6574914359500466,  0.3643405300325093,  0.9748340828362385,  0.8277183720378418,  -0.055683119302031764,  -0.5583730205759271,  0.0011210302118192514]]
        self.group.set_pose_targets(pose_list)
        plan_a = self.group.plan()
        self.group.execute(plan_a)

    def move_from_banana_to_box(self):
        self.group.clear_pose_targets()
        pose_list = [ [0.5875506246336094,  0.3763041795207202,  1.063396981981316,  -0.8057623576497088,  0.05605145592580426,  0.5895788052781288,  0.001445562241683962], [0.6137616233740558,  0.36922858927688135,  0.9842034415986988,  -0.6994332240845458,  0.053496952938704365,  0.712619080693081,  0.010260940752175795], [0.6575073028051109,  0.36431261430672174,  0.9748731371582009,  0.8277744821612689,  -0.05577557576199268,  -0.5582806319201085,  0.0011080857121941736], [0.6574914359500466,  0.3643405300325093,  0.9748340828362385,  0.8277183720378418,  -0.055683119302031764,  -0.5583730205759271,  0.0011210302118192514]]
        self.group.set_pose_targets(pose_list)
        plan_a = self.group.plan()
        self.group.execute(plan_a)

    def apple_sequence(self):
        self.move_to_apple()
        self.grip.close()
        self.move_from_apple_to_box()
        self.grip.open()



    def turn_to_table(self):
        # Set robot to be dead in front of table
        sms = gazebo_msgs.srv.SetModelStateRequest()
        sms.model_state.model_name = 'fetch'
        sms.model_state.pose.position.x =  -0.00767492799834
        sms.model_state.pose.position.y = -0.0369484314248
        sms.model_state.pose.position.z = 0.00109501923752
        sms.model_state.pose.orientation.x  = 0.000550457610553
        sms.model_state.pose.orientation.y = -0.00227147554445
        sms.model_state.pose.orientation.z = -0.0196048345898
        sms.model_state.pose.orientation.w = 0.99980507493
        world_transform.set_model_pose(sms)


if __name__ =="__main__":
    am = ArmMover()
    am.arm_back()


    fetch_pose = world_transform.get_model_pose('fetch')
    print(fetch_pose)



    import IPython
    IPython.embed()
